"use client";

import { useState } from "react";
import { getChatCompletion } from "@/services/llmService";
import { marked } from "marked";

interface SentimentAnalysisButtonProps {
  bookContent: string;
}

const SentimentAnalysisButton = ({ bookContent }: SentimentAnalysisButtonProps) => {
  const [sentimentAnalysisHtml, setSentimentAnalysisHtml] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSentimentAnalysis = async () => {
    setIsLoading(true);
    const prompt = `Give me a sentiment analysis and answer with the analysis instead of giving an introduction, of this book: ${bookContent}`;

    const response = await getChatCompletion(prompt);
    const sentimentAnalysis = response.choices[0].message.content;

    const sentimentHtml = marked(sentimentAnalysis);

    setSentimentAnalysisHtml(sentimentHtml as string);
    setIsLoading(false);
  };

  return (
    <div>
      <button
        onClick={handleSentimentAnalysis}
        disabled={isLoading}
        className="bg-blue-500 text-white py-2 px-4 rounded mb-6"
      >
        {isLoading ? "Analyzing..." : "Analyze Sentiment"}
      </button>

      {sentimentAnalysisHtml && (
        <div className="bg-white text-gray-900 p-4 rounded shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">Sentiment Analysis</h2>
          <div
            className="text-black whitespace-pre-wrap overflow-auto text-sm"
            dangerouslySetInnerHTML={{ __html: sentimentAnalysisHtml }}
          />
          <p className="mt-4 text-gray-500 text-xs italic">
            *This analysis was generated by an AI model.
          </p>
        </div>
      )}
    </div>
  );
};

export default SentimentAnalysisButton;
